# -*- coding: utf-8 -*-
"""NAMED ENTITY RECOGNITION .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3wu_PDcqE5OiNI5qjH_RApKwQDk8N-G
"""

pip install spacy nltk requests #Install Required Libraries

""" Fetch a News Article"""

import requests

def fetch_news(api_key):
    url = f'https://newsapi.org/v2/top-headlines?country=us&apiKey={api_key}'
    response = requests.get(url)
    articles = response.json().get('articles')
    if articles:
        return articles[0]['content']
    return None

api_key = '00198badc56a41f4b9f6228a04ca664c'#api key
news_article = fetch_news(api_key)
if news_article:
    print(news_article)
else:
    print("Failed to fetch news article.")

"""Extract Entities using NLTK (Rule-Based Approach)"""

import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.chunk import ne_chunk
from nltk.tag import pos_tag

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

def nltk_ner(text):
    sentences = sent_tokenize(text)
    entities = []
    for sentence in sentences:
        tokens = word_tokenize(sentence)
        pos_tags = pos_tag(tokens)
        tree = ne_chunk(pos_tags)
        for subtree in tree:
            if isinstance(subtree, nltk.Tree):
                entity = " ".join([token for token, pos in subtree.leaves()])
                entity_type = subtree.label()
                entities.append((entity, entity_type))
    return entities

nltk_entities = nltk_ner(news_article)
print("Entities extracted by NLTK:", nltk_entities)

"""Extract Entities using SpaCy (ML-Based Approach)"""

import spacy

nlp = spacy.load('en_core_web_sm')

def spacy_ner(text):
    doc = nlp(text)
    entities = [(entity.text, entity.label_) for entity in doc.ents]
    return entities

spacy_entities = spacy_ner(news_article)
print("Entities extracted by SpaCy:", spacy_entities)

"""Compare Results"""

def compare_entities(nltk_entities, spacy_entities):
    nltk_set = set(nltk_entities)
    spacy_set = set(spacy_entities)

    common_entities = nltk_set & spacy_set
    nltk_only = nltk_set - spacy_set
    spacy_only = spacy_set - nltk_set

    print("\nCommon Entities:", common_entities)
    print("\nEntities only in NLTK:", nltk_only)
    print("\nEntities only in SpaCy:", spacy_only)

compare_entities(nltk_entities, spacy_entities)

